{"version":3,"sources":["scripts/main.js"],"names":["body","document","querySelector","newMessage","text","condition","div","createElement","dataset","qa","classList","add","textContent","append","promisLC","Promise","resolve","addEventListener","promisRC","firstPromise","reject","then","setTimeout","Error","secondPromise","race","value","thirdPromise","all","message1","catch","message2","message3"],"mappings":";AAAA,aAEA,IAAMA,EAAOC,SAASC,cAAc,QAEpC,SAASC,EAAWC,EAAMC,GAClBC,IAAAA,EAAML,SAASM,cAAc,OAEnCD,EAAIE,QAAQC,GAAK,eACjBH,EAAII,UAAUC,IAAIN,GAClBC,EAAIM,YAAcR,EAClBJ,EAAKa,OAAOP,GAGd,IAAMQ,EAAW,IAAIC,QAAQ,SAAAC,GAC3Bf,SAASgB,iBAAiB,QAAS,WACjCD,QAIEE,EAAW,IAAIH,QAAQ,SAAAC,GAC3Bf,SAASgB,iBAAiB,cAAe,WACvCD,QAIEG,EAAe,IAAIJ,QAAQ,SAACC,EAASI,GACzCN,EAASO,KAAK,WAAML,OAAAA,EAAQ,gCAC5BM,WAAW,WAAMF,OAAAA,EAAO,IAAIG,MAAM,gCAAgC,OAG9DC,EAAgB,IAAIT,QAAQ,SAACC,EAASI,GAC1CL,QAAQU,KAAK,CAACX,EAAUI,IACrBG,KAAK,SAACK,GAAUV,OAAAA,EAAQ,mCAGvBW,EAAe,IAAIZ,QAAQ,SAAAC,GAC/BD,QAAQa,IAAI,CAACd,EAAUI,IACpBG,KAAK,SAACK,GAAUV,OAAAA,EAAQ,kCAG7BG,EACGE,KAAK,SAAAQ,GAAY1B,OAAAA,EAAW0B,EAAU,aACtCC,MAAM,SAAAD,GAAY1B,OAAAA,EAAW0B,EAAU,WAE1CL,EAAcH,KAAK,SAAAU,GAAY5B,OAAAA,EAAW4B,EAAU,aAEpDJ,EAAaN,KAAK,SAAAW,GAAY7B,OAAAA,EAAW6B,EAAU","file":"main.94f82a0c.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst body = document.querySelector('body');\n\nfunction newMessage(text, condition) {\n  const div = document.createElement('div');\n\n  div.dataset.qa = 'notification';\n  div.classList.add(condition);\n  div.textContent = text;\n  body.append(div);\n}\n\nconst promisLC = new Promise(resolve => {\n  document.addEventListener('click', () => {\n    resolve();\n  });\n});\n\nconst promisRC = new Promise(resolve => {\n  document.addEventListener('contextmenu', () => {\n    resolve();\n  });\n});\n\nconst firstPromise = new Promise((resolve, reject) => {\n  promisLC.then(() => resolve('First promise was resolved'));\n  setTimeout(() => reject(new Error('First promise was rejected')), 3000);\n});\n\nconst secondPromise = new Promise((resolve, reject) => {\n  Promise.race([promisLC, promisRC])\n    .then((value) => resolve('Second promise was resolved'));\n});\n\nconst thirdPromise = new Promise(resolve => {\n  Promise.all([promisLC, promisRC])\n    .then((value) => resolve('Third promise was resolved'));\n});\n\nfirstPromise\n  .then(message1 => newMessage(message1, 'success'))\n  .catch(message1 => newMessage(message1, 'error'));\n\nsecondPromise.then(message2 => newMessage(message2, 'success'));\n\nthirdPromise.then(message3 => newMessage(message3, 'success'));\n\n//\n"]}